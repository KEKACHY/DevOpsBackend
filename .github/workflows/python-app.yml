name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  SONAR_HOST_URL: "http://188.225.42.100:9000"
  SONAR_PROJECT_KEY: "Backend"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        env:
          SQLALCHEMY_DATABASE_URI: ${{ secrets.SQLALCHEMY_DATABASE_TEST_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          PYTHONPATH=. pytest tests/ -v --disable-warnings --cov=app --cov-report=xml

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=app \
            -Dsonar.tests=tests \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true
      
  docker-build-push:
    runs-on: ubuntu-latest
    needs: sonar  # Wait for build and test to complete successfully
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          klevita/scraper-back:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}        # e.g., 192.168.1.100
        username: ${{ secrets.SERVER_USERNAME }} # e.g., ubuntu, ec2-user
        key: ${{ secrets.SERVER_SSH_KEY }}       # Your PRIVATE SSH key
        script: |
          cd prj
          kubectl rollout restart deployment/backend -n prj
          kubectl rollout status deployment/backend -n prj
          kubectl get pods
